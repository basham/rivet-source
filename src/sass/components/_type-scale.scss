
// This little function makes it easier to get values out
// of the type-sizes map. see "core/_varibales.scss".

@function ts($key) {
    @return map-get($type-sizes, $key);
}


// This type scale mixin allows you to easily use values from the
// define type-sizes map above if you don't want to use the utility
// classes in your markup.

// @example
//     .my-element {
//         @include ts-size(18);
//     }

@mixin ts-size($ts-value) {
    font-size: ts($ts-value);
}


// @param {number (with unit)}

// @example
//     @include mq(480px) {
//         .my-element {
//             color: red;
//         }
//     }

// @example
//     @media screen and (min-width: 480px) {
//         .my-element {
//             color: red;
//         }
//     }

@mixin mq($size) {

    @media screen and (min-width: $size) {
        @content
    }

}


/**
 * These type scale classes will maintain the same font sizes across all
 * screens when applied. Use the responsive utility classes below to
 * apply different font sizes based on screen size.
 */

@each $ts-pixels, $ts-rems in $type-sizes {

    .ts-#{$ts-pixels} {
        font-size: $ts-rems !important;
    }

}




/**
 * These responsive type scale classes make it easy to apply different
 * font sizes based on screen sizes.
 * Example:
 * <h1 class="ts-18 ts-20-md-up ts-32-lg-up">Hello, world!</h1>
 *
 * The font size on this h1 element would be 18px on small screens,
 * 20px on medium screens and up, and 32px on large screens and up.
 */

@each $bp-name, $bp-size in $breakpoints {

    @include mq($bp-size) {

        @each $ts-pixels, $ts-rems in $type-sizes {

            .ts-#{$ts-pixels}-#{$bp-name} {
                font-size: $ts-rems !important;
            }

        }

    }

}
